Entity Frame work:

An object relational Mapper(ORM)
Translates our code into SQL commands that update our tables in the database.
When we add entity framewwork, we need to create an important class that derives from the DBContext class, which comes with EF .

This class acts as a bridge between our domain or entity classes and the database

DBcontext class is the primary class we use for interacting with our database.

Example: 
Entity framework, allows us to use linqqueries which are similar as follows.

DBContext.Users.Add(new User{ Id=4, UserName= Lakshmi}) --- > SQliteProvider --> INSERT INTO Users(Id, Name) Values (4, Lakshmi)


Featues:
 Querying
 Change Tracking
 Saving(Insert, update,delete) -- Save changes method
 Concurrency
 Transactions
 Caching 
 Built- in conventions  (EF schema for ID )
 Configurations
 Migrations

 when we want to use a class from different name space , we use using statements
 A DBContext instance represens a session with the database and  can be used to query and save instances of our entities.
 DB context  is a combination of the unit of work and repository pattern

 A DbSet can be used to query and save instances of TEntity. 
 LINQ queries against a DbSet will be translated into queries against the database.


[ApiController]
Indicates that a type and all derived types are used to serve HTTP API responses.

Controllers decorated with this attribute are configured with features and behavior targeted at improving the developer experience for building APIs.

When decorated on an assembly, all controllers in the assembly will be treated as controllers with API behavior.

Authentication:
1. storing in the clear text --use ssl security to encrypt the data
2.  Hashing the password

var user=  _repo.Users.Find(username);
 var passwordHash= CalculatePasswordHash(password);
 if(passwordHash!=user.PasswordHash){
    return UnAuthorized
 }

 Problems with the Using the PasswordHash:
1. if two users use the same password, then their PasswordHashes will be same. 
this gives an hint on decode the password to the attackers. If database is compromised.
 2. Using the just hashing a password -- there are dictionaries of every possible commonly used or 
 combination of different passwords available, and their hashes have been already beeen computed
 in various different algorithms.
 they can check the hashes and decode the password.
3. Hashing and salting the password.
// PasswordSalt is a randomised string passed to the CalculatePasswordHash to randomise the password hash.
even though the users have same passwords , the hashes will be different.
var user =_repo.Users.Find(username);
var passwordHash=CalculatePasswordHash(password,user.PasswordSalt);
if(passwordHash!=User.PasswordHash){
    return UnAuthorized;
}

JSON Web Tokens -- JWT 
how to authenticate an Api
 tokens are good to use with in the Api
 Industry standard tokens 
 self contained 
 It contains credentials
 claims
 other information
Basically long string seperated by the period(.)
 JWT Structure
 Header of the token: Algorithm and type
 {"alg" : "algorithm code", "typ":"JWT}
Payload (Data)
claims-- claiming to be something
"nameid:,"role","nbf", "exp", "iat"

Verify Signature
Signature is encrypted. -- by the server itself.

send username +Password 
validate credentials and return a JWT
sends JWT with further requests
server verifies JWT and sends back the response.

Benefits :
No session to manage - JWTs are self contained tokens
Portable- A single token can be used with multiple backends
No cookies required- mobile friendly
Performance- Once a token is issued, there is no need to make a database request to verify a users authenticationn.



Change the allowedhosts from appsettings .json to https:localhost/5000,

OnInit:

A lifecycle hook that is called after Angular has initialized all data-bound properties of a directive. 
Define an ngOnInit() method to handle any additional initialization tasks.

http=inject(HttpClient) --- Dependency injection

observable needs to be subscribed to perform the action 
http.get () -- GET request that interprets the body as JSON and returns the response body as an object parsed from JSON
should unsubscribe once subscribed to observable (otherwise it is a memory consuming and resource killing process.), 
http request will definetly unsubscribe once the request is completed.

structural Directive -- ngFor

@for (user of users ; track index) -- is a direct flow of angular.



commands:
nvm -v
nvm install lts
nvm list
nvm use newest

node -v
dotnet dev-certs https --trust
dotnet run
dotnet tool install --global dotnet-ef --version 8.0.11
dotnet tool list -g
dotnet ef
dotnet ef migrations -h
dotnet ef migrations add InitialCreate -o Data/Migrations
dotnet ef database -h
dotnet ef database update
dotnet watch
dotnet new list
dotnet new gitignore

git add .
git commit -m " "
git remote add origin "repository link.git"
git pull
git push
git push --set-upstream origin main

git branch -m main
git status
git log
git pull --tags origin main --allow-unrelated-histories

ng serve

creating the self signed certificates 
ng --version
choco install mkcert
mkcert -install
mkdir ssl
cd ssl
// now install the certificate
mkcert localhost

After installing the certificate update the angular .json file for serve with options 
and add the ssl path, sslCert, sslKey paths to the file.



